var searchIndex = {};
searchIndex["rymdbiljard"] = {"doc":"","items":[[5,"main","rymdbiljard","",null,{"inputs":[],"output":null}],[0,"poolball","","",null,null],[3,"Poolball","rymdbiljard::poolball","Poolball containing information about a single poolball in the game, and\nmethods for manipulating this poolballs physical status",null,null],[12,"position","","",0,null],[12,"radius","","",0,null],[12,"mass","","",0,null],[12,"velocity","","",0,null],[12,"ball_type","","",0,null],[4,"BallType","","Used to differentiate between the different colored poolballs.\nOnly one poolball maybe White at any given moment",null,null],[13,"White","","",1,null],[13,"Red","","",1,null],[13,"Blue","","",1,null],[17,"MASS","","",null,null],[17,"RADIUS","","",null,null],[11,"clone","","",0,null],[11,"fmt","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"clone","","",1,null],[11,"fmt","","",1,null],[11,"eq","","",1,null],[11,"new","","Creates a new Poolball with the given initial position and velocity",0,{"inputs":[{"name":"point2"},{"name":"balltype"}],"output":{"name":"poolball"}}],[11,"update","","Updates the poolball position using its current velocity",0,null],[11,"update_velocity","","Updates the velocity of the poolball given the perceived acceleration",0,null],[11,"set_velocity","","Sets the velocity of the ball to the given velocity",0,null],[11,"get_value","","Returns the score value of the poolball based on the ball type\n- White: -100\n- Red: 10\n- Blue: 30",0,null],[11,"is_stationary","","Returns `true` if the poolball is stationary",0,null],[11,"render","","Renders itself using the given graphics",0,null],[0,"goalzone","rymdbiljard","",null,null],[3,"Goalzone","rymdbiljard::goalzone","Implements a basic goalzone to be used in each corner of the playing field.",null,null],[12,"position","","",2,null],[12,"radius","","",2,null],[17,"RADIUS","","",null,null],[11,"new","","Creates a new goalzone at the given position",2,{"inputs":[{"name":"point2"}],"output":{"name":"goalzone"}}],[11,"reached_goal","","Returns `true` if the given poolball is inside the goalzone",2,null],[11,"render","","Renders itself using the given graphics",2,null],[0,"physics","rymdbiljard","",null,null],[5,"gravity_acceleration","rymdbiljard::physics","Calculates the gravity acceleration from an object with given mass at given\ndistance",null,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"f64"}}],[5,"calculate_gravity","","Calculates the acceleration acting upon the ball from the given black holes",null,{"inputs":[{"name":"vec"},{"name":"poolball"}],"output":{"name":"vector2"}}],[5,"calculate_friction","","Calculates the direction and size of the friction acceleration on the given\nball",null,{"inputs":[{"name":"poolball"}],"output":{"name":"vector2"}}],[5,"ball_ball_collision","","Calculates the new velocities for 2 colliding poolballs after time delta_time,\n(delta_time is in seconds)",null,{"inputs":[{"name":"poolball"},{"name":"poolball"}],"output":null}],[5,"time_to_ball_ball_collision","","Returns the time until the given two poolballs collide given their current\nvelocities. Infinity is returned if the two poolballs never collide",null,{"inputs":[{"name":"poolball"},{"name":"poolball"}],"output":{"name":"f64"}}],[5,"time_to_wall_collision","","Return the time to impact with wall given the current velocity",null,{"inputs":[{"name":"poolball"}],"output":{"name":"f64"}}],[5,"ball_wall_collision","","Recalculates the new velocities for the ball given collision with a wall",null,{"inputs":[{"name":"poolball"}],"output":null}],[17,"FRICTION","","",null,null],[0,"blackhole","rymdbiljard","",null,null],[3,"Blackhole","rymdbiljard::blackhole","Blackhole contains information about a single blackhole in the game, and\nmethods for rendering and interacting with other entities",null,null],[12,"position","","",3,null],[12,"mass","","",3,null],[12,"radius","","",3,null],[12,"reach","","",3,null],[11,"new","","Constructs a new Blackhole with the given properties",3,{"inputs":[{"name":"point2"},{"name":"f64"},{"name":"f64"},{"name":"f64"}],"output":{"name":"blackhole"}}],[11,"is_spagettified","","Returns `true` if the given poolball is in contact with the blackhole",3,null],[11,"render","","Renders itself using the given graphics",3,null],[0,"math","rymdbiljard","",null,null],[5,"calc_magnitude","rymdbiljard::math","Returns the magnitude of the vector",null,{"inputs":[{"name":"vector2"}],"output":{"name":"f64"}}],[0,"game","rymdbiljard","",null,null],[3,"CollisionPair","rymdbiljard::game","Struct used for holding information about a ball-ball collision or a\nball-wall collision.\nA ball-wall collision is signified by Second being none.",null,null],[12,"first","","",4,null],[12,"second","","",4,null],[12,"time","","",4,null],[3,"Game","","Contains information about the global game state as well as methods for\nhandling the overarching game mechanics including the update loop and\nthe collision handling algorithm.",null,null],[12,"balls","","",5,null],[12,"blackholes","","",5,null],[12,"goalzones","","",5,null],[12,"score","","",5,null],[12,"arrow","","",5,null],[5,"white_ball_position","","Searches for the white ball in the vector returning its index",null,{"inputs":[{"name":"vec"}],"output":{"name":"option"}}],[11,"new","","Creates a new game given the specified parameters",5,{"inputs":[{"name":"vec"},{"name":"vec"},{"name":"vec"}],"output":{"name":"self"}}],[11,"render","","Renders the current game state including the poolballs, current score,\nblackholes, goalzones and the arrow indicator using GlGraphics",5,null],[11,"try_switch_mode","","Attemps to switch to the next mode in the shooting stage doing so\nif and only if the white ball is stationary",5,null],[11,"update","","Updates the positon, speeds and so on for all poolballs aswell as\nhandling the collisions",5,null],[11,"get_first_collision_pair","","Returns a collision pair for the earlies collision by going throguh all\npoolballs searching for the ball-wall or ball-ball pair with the earlies\ncollision time",5,null],[0,"arrow","rymdbiljard","",null,null],[3,"Arrow","rymdbiljard::arrow","Basic arrow entity which is used for drawing the direction and power in the\nshooting mode",null,null],[12,"position","","",6,null],[12,"direction","","",6,null],[12,"length","","",6,null],[12,"mode","","",6,null],[12,"time_passed","","",6,null],[4,"ShootingMode","","Mode to distinguish between the different staged of user interaction with the\nwhite poolball. In rotate mode the used decides the direction whereas in\nPower mode the user decides the poolball&#39;s initial speed",null,null],[13,"Rotate","","",7,null],[13,"Power","","",7,null],[17,"ROTATION_SPEED","","",null,null],[17,"MAX_LENGTH","","",null,null],[17,"DEFAULT_LENGTH","","",null,null],[11,"clone","","",7,null],[11,"fmt","","",7,null],[11,"eq","","",7,null],[11,"new","","Constructs a new Arrow at the given position",6,{"inputs":[{"name":"point2"}],"output":{"name":"arrow"}}],[11,"update","","Updates the arrow position, direction and length",6,null],[11,"render","","Renders itself using the given graphics",6,null]],"paths":[[3,"Poolball"],[4,"BallType"],[3,"Goalzone"],[3,"Blackhole"],[3,"CollisionPair"],[3,"Game"],[3,"Arrow"],[4,"ShootingMode"]]};
initSearch(searchIndex);
